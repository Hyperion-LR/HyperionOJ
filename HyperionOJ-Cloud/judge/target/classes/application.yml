server:
  port: 9900
spring:
  application:
    name: judge
  profiles:
    active: dev
  cloud:
    nacos:
      server-addr: localhost:8848
      discovery:
        cluster-name: HyperionOJ
        ephemeral: true
        namespace: 8c23f025-5aae-49be-8505-eb6ddce4970a
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      # 发生错误后，消息重发的次数。
      retries: 1
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: all
    consumer:
      auto-offset-reset: earliest # 设置消费者分组最初的消费进度为 earliest
      group-id: judgeTest
      # 键的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: com.artisan.springkafka.domain
    listener:
      # 但消费者监听的topic不存在时，保证能够是项目启动
      missing-topics-fatal: false
judge:
  fileDir:
    problem: D:\WorkSpace\Java_Works\IDEA_Works\HyperionOJ\judge\problem_data
    submit: D:\WorkSpace\Java_Works\IDEA_Works\HyperionOJ\judge\submit_data
