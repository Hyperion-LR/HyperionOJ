server:
  port: 9900
spring:
  application:
    name: judge
  profiles:
    active: dev
  cloud:
    nacos:
      server-addr: localhost:8848
      discovery:
        cluster-name: HyperionOJ
        ephemeral: true
        namespace: 8c23f025-5aae-49be-8505-eb6ddce4970a
  redis:
    host: 127.0.0.1
    port: 6379
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/hyperionoj?serverTimezone=UTC&allowMultiQueries=true
    username: root
    password: 123212321
    type: com.alibaba.druid.pool.DruidDataSource
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
  servlet:
    multipart:
      max-request-size: 5GB
      max-file-size: 1GB
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      # 发生错误后，消息重发的次数。
      retries: 3
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      group-id: judgeTest
      # 键的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: com.artisan.springkafka.domain
    listener:
      # 但消费者监听的topic不存在时，保证能够是项目启动
      missing-topics-fatal: false
mybatis-plus:
  mapper-locations: classpath:com/hyperionoj/dao/mapper/*.xml
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
      table-prefix: oj_
judge:
  fileDir:
    problem: D:\WorkSpace\Java_Works\IDEA_Works\HyperionOJ\judge\problem_data
    submit: D:\WorkSpace\Java_Works\IDEA_Works\HyperionOJ\judge\submit_data
